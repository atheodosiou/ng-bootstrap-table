{"version":3,"sources":["ng://ng-bootstrap-table/lib/models/paginator.model.ts","ng://ng-bootstrap-table/lib/paginator/paginator.component.ts","ng://ng-bootstrap-table/lib/paginator/paginator.module.ts","ng://ng-bootstrap-table/lib/directives/b-header.directive.ts","ng://ng-bootstrap-table/lib/directives/b-body.directive.ts","ng://ng-bootstrap-table/lib/services/b-table.service.ts","ng://ng-bootstrap-table/lib/table/table.component.ts","ng://ng-bootstrap-table/lib/directives/b-selectable-row.directive.ts","ng://ng-bootstrap-table/lib/directives/directive.module.ts","ng://ng-bootstrap-table/lib/ng-bootstrap-table.module.ts"],"names":["PaginatorConfig","this","alignment","Alignment","RIGHT","LEFT","CENTER","Sizing","PaginatorComponent","_first","_activePage","onPageChange","EventEmitter","Object","defineProperty","prototype","config","_config","ngOnInit","initPaginator","setPage","page","emit","createPageEvent","rowsAndTotalRecordsExists","Error","createPages","getTotalPages","isOk","rows","totalRecords","Math","ceil","totalPages","_pages","i","push","pageEvent","nextPage","activePage","previousPage","rowsPerPage","limit","offset","Component","args","selector","template","Input","Output","PaginatorModule","NgModule","imports","CommonModule","FormsModule","exports","declarations","BHeaderDirective","Directive","BBodyDirective","ContentChild","TemplateRef","static","BTableService","$onRowSelectSubject","Subject","$onRowUnselectSubject","Injectable","providedIn","TableComponent","bTableService","paginator","stickyHeader","stickyHeaderBgColor","stickyHeaderTextColor","onRowSelect","onRowUnselect","_this","onRowSelectSubject","subscribe","value","onRowUnselectSubject","initializePaginator","checkInputs","onPageSelect","console","log","paginatorConfig","pConfig","sizing","columns","read","BootstrapTableModule","BSelectableRowDirective","renderer","hostElement","onClick","event","selectUnSelectRow","rowEvent","originalEvent","data","bSelectableRow","selected","prevRowData","next","Renderer2","ElementRef","HostListener","BTableDirectivesModule","NgBootstrapTableModule","providers"],"mappings":"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","sourcesContent":["export class PaginatorConfig {\n    sizing: Sizing;\n    alignment: Alignment = Alignment.RIGHT;\n}\n\nexport enum Alignment {\n    LEFT = \"justify-content-start\",\n    CENTER = \"justify-content-center\",\n    RIGHT = \"justify-content-end\"\n}\n\nexport enum Sizing {\n    SMALL = \"pagination-sm\",\n    LARGE = \"pagination-lg\"\n}\n\nexport class PaginatorPage {\n    previousPage: number\n    currentPage: number;\n    nextPage: number;\n    disabled: boolean;\n    active: boolean;\n}\n\nexport interface PageEvent {\n    nextPage: number;\n    activePage: number;\n    previousPage: number;\n    rowsPerPage: number;\n    totalRecords: number;\n    totalPages: number;\n    limit: number;\n    offset: number;\n}","import { Component, OnInit, Input, Output, EventEmitter, OnChanges, SimpleChange, SimpleChanges } from '@angular/core';\nimport { PaginatorConfig, PaginatorPage, PageEvent } from '../models/paginator.model';\n\n@Component({\n  selector: 'b-paginator',\n  templateUrl: './paginator.component.html',\n  styleUrls: ['./paginator.component.scss']\n})\nexport class PaginatorComponent implements OnInit {\n\n\n  _first: number = 0;\n  _config: PaginatorConfig;\n  _pages: PageEvent[];\n  _activePage: number = 1;\n  _paginatorState: any;\n\n  @Input() rows: number;\n  @Input() totalRecords;\n  @Input() set config(config: PaginatorConfig) {\n    this._config = config;\n  }\n\n  @Output() onPageChange: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  ngOnInit() {\n    this.initPaginator();\n  }\n\n  setPage(page: number) {\n    if (this._activePage !== page) {\n      this._activePage = page;\n      this.onPageChange.emit(this.createPageEvent(page));\n    }\n  }\n\n  private initPaginator() {\n    if (!this.rowsAndTotalRecordsExists()) {\n      throw new Error('You must provide \\'rows\\' and \\'totalRecords\\' parameters!')\n    }\n    this.createPages(this.getTotalPages());\n  }\n\n  private rowsAndTotalRecordsExists(): boolean {\n    let isOk: boolean = true;\n    if (!this.rows || !this.totalRecords) {\n      isOk = false;\n    }\n    return isOk;\n  }\n\n  private getTotalPages() {\n    return Math.ceil(this.totalRecords / this.rows) || 1;\n  }\n\n  private createPages(totalPages: number) {\n    this._pages = [];\n    for (let i = 1; i <= totalPages; i++) {\n      this._pages.push(this.createPageEvent(i));\n    }\n  }\n\n  private createPageEvent(page: number): PageEvent {\n    let pageEvent:PageEvent = {\n      nextPage: page < this.getTotalPages() ? page + 1 : page == this.getTotalPages() ? null : this.getTotalPages() - 1,\n      activePage: page,\n      previousPage: page !== 0 && page < this.getTotalPages() ? page - 1 : page == 0 ? null : page == 0 ? null : this.getTotalPages() - 1,\n      rowsPerPage: this.rows,\n      totalRecords: this.totalRecords,\n      totalPages: this.getTotalPages(),\n      limit: this.rows,\n      offset: (page * this.rows) - this.rows\n    };\n    if (pageEvent.previousPage === 0) {\n      pageEvent.previousPage = null;\n    }\n    return pageEvent;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaginatorComponent } from './paginator.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  exports:[PaginatorComponent],\n  declarations: [PaginatorComponent]\n})\nexport class PaginatorModule { }\n","import { Directive, Input, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[bTemplate=\"header\"]'\n})\nexport class BHeaderDirective{\n  constructor() { }\n}\n","import { Directive, Renderer2, ElementRef, TemplateRef, ContentChild } from '@angular/core';\nimport { BTableService } from '../services/b-table.service';\n\n@Directive({\n  selector: '[bTemplate=\"body\"]'\n})\nexport class BBodyDirective{\n  @ContentChild(TemplateRef,{static:false}) template: TemplateRef<any>;\n  \n  // constructor(private bTableService: BTableService,private renderer:Renderer2, private hostElement:ElementRef) {\n  //   this.bTableService.onRowUnselectSubject.subscribe(()=>{\n  //     console.log('From Body:')\n  //     console.log(this.template.elementRef);\n  //   })\n  // }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BTableService {\n\n  constructor() { }\n\n  //Subjects to handle b-table row select and unselect actions\n  private $onRowSelectSubject: Subject<any> = new Subject<any>();\n  private $onRowUnselectSubject: Subject<any> = new Subject<any>();\n\n  //Subject getters\n  get onRowSelectSubject(): Subject<any> {\n    return this.$onRowSelectSubject;\n  }\n\n  get onRowUnselectSubject(): Subject<any> {\n    return this.$onRowUnselectSubject;\n  }\n\n}\n","import { Component, OnInit, Input,ContentChild, TemplateRef, Output, EventEmitter, ViewChild, ElementRef} from '@angular/core';\n\n@Component({\n  selector: 'b-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss']\n})\nexport class TableComponent implements OnInit {\n  //context\n  ctx;\n  pConfig:PaginatorConfig;\n  \n  @ContentChild(BHeaderDirective, { static: true, read: TemplateRef }) header: TemplateRef<any>;\n  @ContentChild(BBodyDirective, { static: true, read: TemplateRef }) body: TemplateRef<any>;\n\n  @Input() value:any[];\n  @Input() columns: any[];\n\n  @Input() striped: boolean;\n  @Input() bordered: boolean;\n  @Input() borderless: boolean;\n  @Input() hover: boolean;\n  @Input() small: boolean;\n  @Input() dark:boolean;\n  @Input() headLight:boolean;\n  @Input() headDark:boolean;\n  @Input() paginator:boolean=false;\n  @Input() paginatorConfig:PaginatorConfig;\n  @Input() rows:number;\n  @Input() totalRecords:number;\n  @Input() responsive: boolean;\n  @Input() stickyHeader = false;\n  @Input() stickyHeaderBgColor = '';\n  @Input() stickyHeaderTextColor = '';\n\n  @Output() onRowSelect:EventEmitter<any>;\n  @Output() onRowUnselect:EventEmitter<any>;\n  @Output() onPageChange:EventEmitter<PageEvent>\n\n  constructor(private bTableService:BTableService) {\n    this.onRowSelect = new EventEmitter<any>();\n    this.onRowUnselect=new EventEmitter<any>();\n    this.onPageChange=new EventEmitter<PageEvent>();\n  }\n  \n  ngOnInit() {\n    this.bTableService.onRowSelectSubject.subscribe(value=>{\n      // console.log('table>onRowSelectSubject',value)\n      this.onRowSelect.emit(value);\n    })\n    this.bTableService.onRowUnselectSubject.subscribe(value=>{\n      this.onRowUnselect.emit(value);\n    })\n    if(this.paginator){\n      this.initializePaginator();\n    }\n     this.checkInputs();\n    //  console.log(this.paginator,this.rows,this.totalRecords,this.paginatorConfig)\n  }\n\n  onPageSelect(page:PageEvent){\n    console.log(page)\n    this.onPageChange.emit(page);\n  }\n  //========================================> INTERNAL FUNCTIONS <========================================\n  private initializePaginator(){\n    if(!this.paginatorConfig){\n      //Default configuration\n      this.pConfig=new PaginatorConfig();\n      this.pConfig.sizing=Sizing.SMALL;\n      this.pConfig.alignment=Alignment.RIGHT;\n    }else{\n      this.pConfig = this.paginatorConfig;\n    }\n  }\n\n  private checkInputs(){\n    if(!this.columns || !this.value){\n      throw new Error('Missing required properties! \\'columns\\' and \\'value\\' must be provided.')\n    }\n\n    if(this.paginator === true){\n      if(!this.rows || !this.totalRecords){\n        throw new Error('Missing required properties! \\'rows\\' and \\'totalRecords\\' must be provided if \\'paginator\\' is true.')\n      }\n    }\n  }\n}\n\n\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { PaginatorModule } from '../paginator/paginator.module';\nimport { BHeaderDirective } from '../directives/b-header.directive';\nimport { BBodyDirective } from '../directives/b-body.directive';\nimport { BTableService } from '../services/b-table.service';\nimport { PaginatorConfig, Sizing, Alignment, PageEvent } from '../models/paginator.model';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    PaginatorModule\n  ],\n  exports: [TableComponent],\n  declarations: [TableComponent]\n})\nexport class BootstrapTableModule { }","import { Directive, Input, OnInit, HostListener, Renderer2, ElementRef, Output, EventEmitter } from '@angular/core';\nimport { BTableService } from '../services/b-table.service';\n\nexport interface BRowEvent {\n  originalEvent: any;\n  data: any;\n  selected: boolean;\n}\n@Directive({\n  selector: '[bSelectableRow]'\n})\nexport class BSelectableRowDirective {\n  private prevRowData: any;\n\n  @Input() bSelectableRow: any;\n\n  @HostListener('click', ['$event'])\n  onClick(event) {\n    this.selectUnSelectRow(event);\n  }\n\n  constructor(private bTableService: BTableService, private renderer: Renderer2, private hostElement: ElementRef) {}\n\n\n  private selectUnSelectRow(event) {\n    // console.log(event)\n    // console.log(this.hostElement.nativeElement)\n\n    let rowEvent: BRowEvent = { originalEvent: event, data: this.bSelectableRow, selected: false };\n    if (!this.prevRowData) {\n      rowEvent.selected = true;\n      this.bTableService.onRowSelectSubject.next(rowEvent);\n      // this.renderer.addClass(this.hostElement.nativeElement,'table-active');\n      this.prevRowData = this.bSelectableRow;\n    } else {\n      if (this.prevRowData != this.bSelectableRow) {\n        rowEvent.selected = true;\n        this.bTableService.onRowSelectSubject.next(rowEvent);\n        // this.renderer.addClass(this.hostElement.nativeElement,'table-active');\n        this.prevRowData = this.bSelectableRow;\n      } else {\n        rowEvent.selected = false;\n        this.bTableService.onRowUnselectSubject.next(rowEvent);\n        // this.renderer.removeClass(this.hostElement.nativeElement,'table-active');\n        this.prevRowData = null;\n      }\n    }\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { BBodyDirective } from './b-body.directive';\nimport { BHeaderDirective } from './b-header.directive';\nimport { BSelectableRowDirective } from './b-selectable-row.directive';\n\n@NgModule({\n    declarations: [\n        BBodyDirective,\n        BHeaderDirective,\n        BSelectableRowDirective\n    ],\n    exports: [\n        BBodyDirective,\n        BHeaderDirective,\n        BSelectableRowDirective\n    ]\n})\nexport class BTableDirectivesModule { }","import { NgModule } from '@angular/core';\nimport { BootstrapTableModule } from './/table/table.component';\nimport { BTableDirectivesModule } from './directives/directive.module';\nimport { BTableService } from './services/b-table.service';\n\n@NgModule({\n  imports: [\n    BootstrapTableModule,\n    BTableDirectivesModule\n  ],\n  exports: [\n    BootstrapTableModule,\n    BTableDirectivesModule\n  ],\n  providers:[BTableService]\n})\nexport class NgBootstrapTableModule { }\n"]}